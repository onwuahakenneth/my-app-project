{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KENZEE101\\\\Desktop\\\\my-app-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport TopBar from \"./components/TopBar\";\nimport MenuOptions from \"./components/MenuOptions\";\nimport PlayButton from \"./components/PlayButton\";\nimport GamePlayInfo from \"./components/GamePlayInfo\";\nimport EndButton from \"./components/EndButton\";\nimport QuestionInterface from \"./components/QuestionInterface\";\nimport Footer from \"./components/Footer\";\nimport Sound from 'react-sound';\nimport myD from './sounds/4 final mid game.mp3';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const settingsFromBackUp = window.localStorage.getItem('settings');\n  const settingData = JSON.parse(settingsFromBackUp);\n  const [onSound, setOnSound] = useState(settingsFromBackUp ? settingData.onSound : true);\n  const [gameCat, setGameCat] = useState(settingsFromBackUp ? settingData.gameCat : 'generalknowledge');\n  const [gameLevel, setGameLevel] = useState(settingsFromBackUp ? settingData.gameLevel : 'eazy');\n  const [displayMenu, setDisplayMenu] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [repeat, setRepeat] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionArray, setQuestionArray] = useState(window.localStorage.getItem('videogames-medium'));\n  const [gameTime, setGameTime] = useState(15);\n  const [timeLeft, setTimeLeft] = useState(gameTime); // Menu Bar Actions\n\n  const handleMenuClick = () => {\n    setDisplayMenu(!displayMenu);\n  }; // Update Category Chosen by the user\n\n\n  const updateCategory = chosenCat => {\n    setGameCat(chosenCat);\n  }; //Update Game Level set by the user\n\n\n  const updateLevel = (level, timerValue) => {\n    setGameLevel(level); // handleTimer(timerValue)\n  }; //Handle Sound ON/OFF\n\n\n  const toggleOnSound = resp => {\n    setOnSound(resp);\n\n    if (onSound) {\n      setIsPlaying(false);\n    } else if (!onSound && !isPlaying) {\n      setIsPlaying(!isPlaying);\n    }\n  }; //Play Actions\n\n\n  const questionsFetched = window.localStorage.getItem(`${gameCat}-${gameLevel}`);\n\n  if (!questionsFetched) {\n    let id = 9;\n\n    switch (gameCat) {\n      case 'books':\n        id = 10;\n        break;\n\n      case 'comics':\n        id = 29;\n        break;\n\n      case 'computers':\n        id = 18;\n        break;\n\n      case 'geography':\n        id = 22;\n        break;\n\n      case 'mathematics':\n        id = 19;\n        break;\n\n      case 'television':\n        id = 14;\n        break;\n\n      case 'videogames':\n        id = 15;\n        break;\n\n      case 'generalknowledge':\n        id = 9;\n        break;\n    }\n\n    const fetchQuestions = async () => {\n      const response = await fetch(`https://opentdb.com/api.php?amount=30&category=${id}&difficulty=${gameLevel}&type=multiple`);\n      const data = await response.json();\n      const questions = data.results;\n      const k = [];\n\n      for (let q of questions) {\n        let {\n          question,\n          incorrect_answers,\n          correct_answer\n        } = q;\n        k.push({\n          question,\n          options: [...incorrect_answers, correct_answer],\n          answer: correct_answer\n        });\n      }\n\n      window.localStorage.setItem(`${gameCat}-${gameLevel}`, JSON.stringify(k));\n      console.log(questions[0].question);\n    };\n\n    fetchQuestions();\n  }\n\n  const play = () => {\n    //Check if we already have the questions downloaded and stored locally\n    setGameStarted(true);\n\n    const startPlay = () => {\n      if (questionsFetched !== null) {\n        setTimeLeft(gameTime);\n\n        if (onSound) {\n          setIsPlaying(!isPlaying);\n        }\n\n        console.log(gameStarted);\n      }\n    };\n\n    setTimeout(startPlay, 1000);\n  };\n\n  const checkAnswer = () => {\n    console.log('Correct!');\n  }; //Handle Next Button Click\n\n\n  const onNextClick = () => {\n    setTimeLeft(gameTime);\n  }; // Handle End Button Click\n\n\n  const onEndClick = () => {\n    setGameStarted(!gameStarted);\n    setTimeLeft(0);\n  }; //Update Game settings\n\n\n  useEffect(() => {\n    //Backup user's settings\n    const settings = {\n      gameCat,\n      gameLevel,\n      onSound\n    };\n    const userSettings = JSON.stringify(settings);\n    window.localStorage.setItem('settings', userSettings); //Simulate A CountDown Timer\n\n    if (timeLeft > 0 && gameStarted) {\n      setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n    } else {\n      setTimeLeft(0);\n    }\n  }, [gameCat, gameLevel, onSound, timeLeft, gameStarted]); //Rendering Zone\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      onclick: handleMenuClick,\n      displayMenu: displayMenu,\n      gameStarted: gameStarted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MenuOptions, {\n      displayMenu: displayMenu,\n      toggleOnSound: toggleOnSound,\n      onSound: onSound,\n      play: play,\n      updateCategory: updateCategory,\n      updateLevel: updateLevel,\n      gameLevel: gameLevel,\n      gameCat: gameCat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n      play: play,\n      displayMenu: displayMenu,\n      gameStarted: gameStarted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GamePlayInfo, {\n      gameStarted: gameStarted,\n      timeLeft: timeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: isPlaying && onSound ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: myD,\n      loop: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EndButton, {\n      gameStarted: gameStarted,\n      handleClick: onEndClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(QuestionInterface, {\n      questionArray: que,\n      checkAnswer: checkAnswer,\n      gameStarted: gameStarted,\n      timeLeft: timeLeft,\n      onNextClick: onNextClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"3d9Pa2w04q8X9gsHY67ajay+jLM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/KENZEE101/Desktop/my-app-project/src/App.js"],"names":["TopBar","MenuOptions","PlayButton","GamePlayInfo","EndButton","QuestionInterface","Footer","Sound","myD","useState","useEffect","App","settingsFromBackUp","window","localStorage","getItem","settingData","JSON","parse","onSound","setOnSound","gameCat","setGameCat","gameLevel","setGameLevel","displayMenu","setDisplayMenu","isPlaying","setIsPlaying","repeat","setRepeat","gameStarted","setGameStarted","questionArray","setQuestionArray","gameTime","setGameTime","timeLeft","setTimeLeft","handleMenuClick","updateCategory","chosenCat","updateLevel","level","timerValue","toggleOnSound","resp","questionsFetched","id","fetchQuestions","response","fetch","data","json","questions","results","k","q","question","incorrect_answers","correct_answer","push","options","answer","setItem","stringify","console","log","play","startPlay","setTimeout","checkAnswer","onNextClick","onEndClick","settings","userSettings","status","PLAYING","STOPPED","que"],"mappings":"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","sourcesContent":["import TopBar from \"./components/TopBar\"\r\nimport MenuOptions from \"./components/MenuOptions\";\r\nimport PlayButton from \"./components/PlayButton\";\r\nimport GamePlayInfo from \"./components/GamePlayInfo\";\r\nimport EndButton from \"./components/EndButton\";\r\nimport QuestionInterface from \"./components/QuestionInterface\";\r\nimport Footer from \"./components/Footer\";\r\nimport Sound from 'react-sound';\r\nimport myD from './sounds/4 final mid game.mp3';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n\r\n    const settingsFromBackUp = window.localStorage.getItem('settings');\r\n    const settingData = JSON.parse(settingsFromBackUp);\r\n   \r\n    const [onSound, setOnSound] = useState(settingsFromBackUp ? settingData.onSound : true);\r\n    const [gameCat, setGameCat] = useState(settingsFromBackUp ? settingData.gameCat : 'generalknowledge');\r\n    const [gameLevel, setGameLevel] = useState(settingsFromBackUp ? settingData.gameLevel : 'eazy');\r\n    const [displayMenu, setDisplayMenu] = useState(false);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [repeat, setRepeat] = useState(true);\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [questionArray, setQuestionArray] = useState(window.localStorage.getItem('videogames-medium'));\r\n    const [gameTime, setGameTime] = useState(15);\r\n    const [timeLeft, setTimeLeft] = useState(gameTime);\r\n    \r\n\r\n    \r\n    // Menu Bar Actions\r\n    \r\n    const handleMenuClick = ()=>{\r\n        setDisplayMenu(!displayMenu);\r\n    }\r\n\r\n    \r\n    // Update Category Chosen by the user\r\n\r\n    const updateCategory = (chosenCat)=>{\r\n        setGameCat(chosenCat)\r\n    }\r\n    \r\n    //Update Game Level set by the user\r\n    \r\n    const updateLevel = (level, timerValue)=>{\r\n        setGameLevel(level)\r\n        // handleTimer(timerValue)\r\n    }\r\n    \r\n\r\n    \r\n    //Handle Sound ON/OFF\r\n      const toggleOnSound = (resp)=>{\r\n          setOnSound(resp)\r\n\r\n        if(onSound){\r\n            setIsPlaying(false)\r\n\r\n        }else if(!onSound && !isPlaying) {\r\n            setIsPlaying(!isPlaying)\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    //Play Actions\r\n    \r\n    const questionsFetched = window.localStorage.getItem(`${gameCat}-${gameLevel}`);\r\n    if(!questionsFetched){\r\n\r\n        let id = 9;\r\n        \r\n        switch(gameCat){\r\n            case 'books':\r\n                id = 10;\r\n                break;\r\n\r\n            case 'comics':\r\n                id = 29;\r\n                break;\r\n\r\n            case 'computers':\r\n                id = 18;\r\n                break;\r\n\r\n            case 'geography':\r\n                id = 22;\r\n                break;\r\n\r\n            case 'mathematics':\r\n                id = 19;\r\n                break;\r\n            \r\n            case 'television':\r\n                id = 14;\r\n                break;\r\n\r\n            case 'videogames':\r\n                id = 15;\r\n                break;\r\n\r\n            case 'generalknowledge':\r\n                id = 9;\r\n                break;\r\n        }\r\n\r\n       \r\n        \r\n      \r\n        const fetchQuestions = async ()=>{\r\n          \r\n            const response = await fetch(`https://opentdb.com/api.php?amount=30&category=${id}&difficulty=${gameLevel}&type=multiple`);\r\n\r\n            const data = await response.json();\r\n            const questions = data.results;\r\n            const k = [];\r\n            for(let q of questions){\r\n                let {question, incorrect_answers, correct_answer } = q;\r\n                k.push({question, options: [...incorrect_answers, correct_answer] , answer: correct_answer})\r\n            }\r\n\r\n            window.localStorage.setItem(`${gameCat}-${gameLevel}`, JSON.stringify(k));\r\n            console.log(questions[0].question)\r\n         }\r\n        fetchQuestions();\r\n            \r\n\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    const play = ()=>{\r\n        //Check if we already have the questions downloaded and stored locally\r\n        \r\n\r\n        setGameStarted(true);\r\n        const startPlay = ()=>{\r\n            \r\n            if(questionsFetched !== null){\r\n                setTimeLeft(gameTime)\r\n                if(onSound){\r\n                    setIsPlaying(!isPlaying)\r\n                 }\r\n                 console.log(gameStarted)\r\n            }\r\n        }\r\n        setTimeout(startPlay, 1000)\r\n         \r\n    }\r\n    \r\n    \r\n\r\n    const checkAnswer = ()=>{\r\n        console.log('Correct!')\r\n           \r\n            \r\n    }\r\n\r\n    //Handle Next Button Click\r\n\r\n    const onNextClick = ()=>{\r\n        setTimeLeft(gameTime);\r\n        \r\n    }\r\n\r\n\r\n    // Handle End Button Click\r\n\r\n    const onEndClick = ()=>{\r\n        setGameStarted(!gameStarted)\r\n        setTimeLeft(0);\r\n\r\n       \r\n        \r\n    }\r\n    \r\n  \r\n    \r\n    //Update Game settings\r\n\r\n    useEffect(()=>{\r\n        //Backup user's settings\r\n        const settings = { gameCat, gameLevel,onSound };\r\n        const userSettings = JSON.stringify(settings)\r\n        window.localStorage.setItem('settings', userSettings)\r\n\r\n    //Simulate A CountDown Timer\r\n   \r\n    if(timeLeft > 0 && gameStarted){\r\n       setTimeout(()=>setTimeLeft(timeLeft-1), 1000); \r\n    }else{\r\n        setTimeLeft(0);\r\n    }\r\n   \r\n\r\n    }, [gameCat, gameLevel, onSound,timeLeft, gameStarted])\r\n    \r\n   \r\n\r\n    //Rendering Zone\r\n\r\n    return (\r\n        <>  \r\n            <TopBar onclick={handleMenuClick} displayMenu={displayMenu} gameStarted={gameStarted}/>\r\n            <MenuOptions  displayMenu={displayMenu}  toggleOnSound={toggleOnSound}  onSound={onSound} play={play} updateCategory={updateCategory} updateLevel={updateLevel} gameLevel={gameLevel}gameCat={gameCat} />\r\n            <PlayButton play={play} displayMenu={displayMenu} gameStarted={gameStarted}/>\r\n            <GamePlayInfo  gameStarted={gameStarted} timeLeft={timeLeft}/>\r\n            <Sound playStatus={isPlaying && onSound ? Sound.status.PLAYING : Sound.status.STOPPED}  url={myD} loop={true}/>\r\n           <EndButton gameStarted={gameStarted} handleClick={onEndClick}/>\r\n           <QuestionInterface questionArray={que} checkAnswer={checkAnswer} gameStarted={gameStarted} timeLeft={timeLeft} onNextClick={onNextClick}/>\r\n           <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}