{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KENZEE101\\\\Desktop\\\\my-app-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport TopBar from \"./components/TopBar\";\nimport MenuOptions from \"./components/MenuOptions\";\nimport PlayButton from \"./components/PlayButton\";\nimport GamePlayInfo from \"./components/GamePlayInfo\";\nimport EndButton from \"./components/EndButton\";\nimport Sound from 'react-sound';\nimport myD from './sounds/4 final mid game.mp3';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const settingsFromBackUp = window.localStorage.getItem('settings');\n  const settingData = JSON.parse(settingsFromBackUp);\n  const [onSound, setOnSound] = useState(settingsFromBackUp ? settingData.onSound : true);\n  const [gameCat, setGameCat] = useState(settingsFromBackUp ? settingData.gameCat : 'books');\n  const [gameLevel, setGameLevel] = useState(settingsFromBackUp ? settingData.gameLevel : 'eazy');\n  const [displayMenu, setDisplayMenu] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [repeat, setRepeat] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameTime, setGameTime] = useState(20); // Menu Bar Actions\n\n  const handleMenuClick = () => {\n    setDisplayMenu(!displayMenu);\n  }; // Update Category Chosen by the user\n\n\n  const updateCategory = chosenCat => {\n    setGameCat(chosenCat);\n  }; //Update Game Level set by the user\n\n\n  const updateLevel = (level, timerValue) => {\n    setGameLevel(level); // handleTimer(timerValue)\n  }; //Handle Sound ON/OFF\n\n\n  const toggleOnSound = resp => {\n    setOnSound(resp);\n\n    if (onSound) {\n      setIsPlaying(false);\n    } else if (!onSound && !isPlaying) {\n      setIsPlaying(!isPlaying);\n    }\n  }; //Play Actions\n  // count down the game Timer\n\n\n  const handleCountDown = time => {\n    let countDown;\n    let t = time;\n\n    const timer = () => {\n      setGameTime(time);\n\n      if (time >= 0) {\n        time--;\n      } else {\n        clearInterval(countDown);\n        setGameTime(t);\n\n        if (repeat) {}\n      }\n    };\n\n    countDown = setInterval(timer, 1000);\n  };\n\n  const play = () => {\n    if (onSound) {\n      setIsPlaying(!isPlaying);\n    }\n\n    setGameStarted(!gameStarted);\n    handleCountDown(gameTime);\n  }; // Handle End Button Click\n\n\n  const onEndClick = () => {\n    setGameStarted(!gameStarted);\n  }; //Update Game settings\n\n\n  useEffect(() => {\n    //Backup user's settings\n    const settings = {\n      gameCat,\n      gameLevel,\n      onSound\n    };\n    const userSettings = JSON.stringify(settings);\n    window.localStorage.setItem('settings', userSettings); // Set the timer based on user's level\n\n    switch (gameLevel) {\n      case 'eazy':\n        setGameTime(20);\n        break;\n\n      case 'medium':\n        setGameTime(15);\n        break;\n\n      case 'hard':\n        setGameTime(10);\n        break;\n\n      case 'wizard':\n        setGameTime(5);\n        break;\n\n      default:\n        setGameTime(20);\n    }\n  }, [gameCat, gameLevel, onSound]); //Rendering Zone\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      onclick: handleMenuClick,\n      displayMenu: displayMenu,\n      gameStarted: gameStarted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MenuOptions, {\n      displayMenu: displayMenu,\n      toggleOnSound: toggleOnSound,\n      onSound: onSound,\n      play: play,\n      updateCategory: updateCategory,\n      updateLevel: updateLevel,\n      gameLevel: gameLevel,\n      gameCat: gameCat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n      play: play,\n      displayMenu: displayMenu,\n      gameStarted: gameStarted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GamePlayInfo, {\n      gameStarted: gameStarted,\n      gameTime: gameTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: isPlaying && onSound ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: myD,\n      loop: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EndButton, {\n      gameStarted: gameStarted,\n      handleClick: onEndClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"ChEWAJtXI3PeWHXzLwa/WEKZN0U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/KENZEE101/Desktop/my-app-project/src/App.js"],"names":["TopBar","MenuOptions","PlayButton","GamePlayInfo","EndButton","Sound","myD","useState","useEffect","App","settingsFromBackUp","window","localStorage","getItem","settingData","JSON","parse","onSound","setOnSound","gameCat","setGameCat","gameLevel","setGameLevel","displayMenu","setDisplayMenu","isPlaying","setIsPlaying","repeat","setRepeat","gameStarted","setGameStarted","gameTime","setGameTime","handleMenuClick","updateCategory","chosenCat","updateLevel","level","timerValue","toggleOnSound","resp","handleCountDown","time","countDown","t","timer","clearInterval","setInterval","play","onEndClick","settings","userSettings","stringify","setItem","status","PLAYING","STOPPED"],"mappings":"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","sourcesContent":["import TopBar from \"./components/TopBar\"\r\nimport MenuOptions from \"./components/MenuOptions\";\r\nimport PlayButton from \"./components/PlayButton\";\r\nimport GamePlayInfo from \"./components/GamePlayInfo\";\r\nimport EndButton from \"./components/EndButton\";\r\nimport Sound from 'react-sound';\r\nimport myD from './sounds/4 final mid game.mp3';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n\r\n    const settingsFromBackUp = window.localStorage.getItem('settings');\r\n    const settingData = JSON.parse(settingsFromBackUp);\r\n   \r\n    const [onSound, setOnSound] = useState(settingsFromBackUp ? settingData.onSound : true);\r\n    const [gameCat, setGameCat] = useState(settingsFromBackUp ? settingData.gameCat : 'books');\r\n    const [gameLevel, setGameLevel] = useState(settingsFromBackUp ? settingData.gameLevel : 'eazy');\r\n    const [displayMenu, setDisplayMenu] = useState(false);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [repeat, setRepeat] = useState(true);\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [gameTime, setGameTime] = useState(20);\r\n\r\n\r\n    // Menu Bar Actions\r\n\r\n    const handleMenuClick = ()=>{\r\n        setDisplayMenu(!displayMenu);\r\n    }\r\n\r\n\r\n    // Update Category Chosen by the user\r\n\r\n    const updateCategory = (chosenCat)=>{\r\n        setGameCat(chosenCat)\r\n    }\r\n\r\n    //Update Game Level set by the user\r\n\r\n    const updateLevel = (level, timerValue)=>{\r\n        setGameLevel(level)\r\n        // handleTimer(timerValue)\r\n    }\r\n\r\n\r\n      //Handle Sound ON/OFF\r\n      const toggleOnSound = (resp)=>{\r\n        setOnSound(resp)\r\n\r\n        if(onSound){\r\n            setIsPlaying(false)\r\n\r\n        }else if(!onSound && !isPlaying) {\r\n            setIsPlaying(!isPlaying)\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    //Play Actions\r\n\r\n    // count down the game Timer\r\n\r\n    const handleCountDown = (time)=>{\r\n        let countDown;\r\n        let t = time;\r\n        const timer = ()=>{\r\n            setGameTime(time);\r\n            if(time >= 0){\r\n                time--;\r\n            }else{\r\n                clearInterval(countDown);\r\n                setGameTime(t)\r\n                if(repeat){\r\n                    \r\n                }\r\n            }\r\n\r\n            \r\n        }\r\n        countDown = setInterval(timer, 1000);\r\n        \r\n        \r\n    }\r\n    const play = ()=>{\r\n        if(onSound){\r\n            setIsPlaying(!isPlaying)\r\n        }\r\n\r\n        setGameStarted(!gameStarted)\r\n        handleCountDown(gameTime);\r\n        \r\n    }\r\n    \r\n    // Handle End Button Click\r\n\r\n    const onEndClick = ()=>{\r\n        setGameStarted(!gameStarted)\r\n    }\r\n    \r\n  \r\n    \r\n    //Update Game settings\r\n\r\n    useEffect(()=>{\r\n        //Backup user's settings\r\n        const settings = { gameCat, gameLevel,onSound };\r\n        const userSettings = JSON.stringify(settings)\r\n        window.localStorage.setItem('settings', userSettings)\r\n\r\n\r\n         // Set the timer based on user's level\r\n    switch (gameLevel){\r\n\r\n        case 'eazy':\r\n            setGameTime(20)\r\n            break;\r\n            \r\n        case 'medium':\r\n            setGameTime(15);\r\n            break;\r\n\r\n        case 'hard':\r\n            setGameTime(10);\r\n            break;\r\n\r\n        case 'wizard':\r\n            setGameTime(5);\r\n            break;\r\n            \r\n            default:\r\n            setGameTime(20);\r\n\r\n\r\n            \r\n    }\r\n\r\n    }, [gameCat, gameLevel, onSound])\r\n    \r\n   \r\n\r\n    //Rendering Zone\r\n\r\n    return (\r\n        <>  \r\n            <TopBar onclick={handleMenuClick} displayMenu={displayMenu} gameStarted={gameStarted}/>\r\n            <MenuOptions  displayMenu={displayMenu}  toggleOnSound={toggleOnSound}  onSound={onSound} play={play} updateCategory={updateCategory} updateLevel={updateLevel} gameLevel={gameLevel}gameCat={gameCat} />\r\n            <PlayButton play={play} displayMenu={displayMenu} gameStarted={gameStarted}/>\r\n            <GamePlayInfo  gameStarted={gameStarted} gameTime={gameTime}/>\r\n            <Sound playStatus={isPlaying && onSound ? Sound.status.PLAYING : Sound.status.STOPPED}  url={myD} loop={true}/>\r\n           <EndButton gameStarted={gameStarted} handleClick={onEndClick}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}