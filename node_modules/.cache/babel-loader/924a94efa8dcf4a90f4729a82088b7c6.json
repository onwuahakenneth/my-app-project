{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KENZEE101\\\\Desktop\\\\my-app-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport TopBar from \"./components/TopBar\";\nimport MenuOptions from \"./components/MenuOptions\";\nimport PlayButton from \"./components/PlayButton\";\nimport GamePlayInfo from \"./components/GamePlayInfo\";\nimport EndButton from \"./components/EndButton\";\nimport QuestionInterface from \"./components/QuestionInterface\";\nimport Footer from \"./components/Footer\";\nimport Sound from 'react-sound';\nimport myD from './sounds/4 final mid game.mp3';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const settingsFromBackUp = window.localStorage.getItem('settings');\n  const settingData = JSON.parse(settingsFromBackUp);\n  const [onSound, setOnSound] = useState(settingsFromBackUp ? settingData.onSound : true);\n  const [gameCat, setGameCat] = useState(settingsFromBackUp ? settingData.gameCat : 'generalknowledge');\n  const [gameLevel, setGameLevel] = useState(settingsFromBackUp ? settingData.gameLevel : 'easy');\n  const [displayMenu, setDisplayMenu] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [repeat, setRepeat] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionArray, setQuestionArray] = useState([{\n    question: 'hello',\n    options: ['Home'],\n    answer: 'ok'\n  }]);\n  const [gameTime, setGameTime] = useState(30);\n  const [timeLeft, setTimeLeft] = useState(gameTime);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [passed, setPassed] = useState('no');\n  const [score, setScore] = useState(0);\n  const [attemps, setAttempts] = useState(6); // Menu Bar Actions\n\n  const handleMenuClick = () => {\n    setDisplayMenu(!displayMenu);\n  }; // Update Category Chosen by the user\n\n\n  const updateCategory = chosenCat => {\n    setGameCat(chosenCat);\n  }; //Update Game Level set by the user\n\n\n  const updateLevel = level => {\n    setGameLevel(level); // handleTimer(timerValue)\n  }; //Handle Sound ON/OFF\n\n\n  const toggleOnSound = resp => {\n    setOnSound(resp);\n\n    if (onSound) {\n      setIsPlaying(!isPlaying);\n    } else if (!onSound && !isPlaying) {\n      setIsPlaying(!isPlaying);\n    }\n  }; //Play Actions\n\n\n  const questionsFetched = window.localStorage.getItem(`${gameCat}-${gameLevel}`);\n\n  if (!questionsFetched) {\n    let id = 9;\n\n    switch (gameCat) {\n      case 'books':\n        id = 10;\n        break;\n\n      case 'comics':\n        id = 29;\n        break;\n\n      case 'computers':\n        id = 18;\n        break;\n\n      case 'geography':\n        id = 22;\n        break;\n\n      case 'mathematics':\n        id = 19;\n        break;\n\n      case 'television':\n        id = 14;\n        break;\n\n      case 'videogames':\n        id = 15;\n        break;\n\n      case 'generalknowledge':\n        id = 9;\n        break;\n    }\n\n    console.log('Current ID', id);\n\n    const fetchQuestions = async () => {\n      const response = await fetch(`https://opentdb.com/api.php?amount=50&category=${id}&difficulty=${gameLevel}&type=multiple`);\n      const data = await response.json();\n      const questions = data.results;\n      const k = [];\n\n      for (let q of questions) {\n        let {\n          question,\n          incorrect_answers,\n          correct_answer\n        } = q;\n        const i = Math.floor(Math.random() * 3);\n        incorrect_answers.splice(i, 0, correct_answer);\n        let arr = [...incorrect_answers];\n\n        for (let i = arr.length - 1; i > 0; i--) {\n          const p = Math.floor(Math.random() * i);\n          [arr[p], arr[i]] = [arr[i], arr[p]];\n        }\n\n        incorrect_answers.sort((a, b) => 0.5 - Math.random());\n        k.push({\n          question,\n          options: [...arr],\n          answer: correct_answer\n        });\n      }\n\n      window.localStorage.setItem(`${gameCat}-${gameLevel}`, JSON.stringify(k));\n    };\n\n    fetchQuestions();\n  }\n\n  const play = () => {\n    //Check if we already have the questions downloaded and stored locally\n    // let sortedQuest = [...questionArray]\n    // sortedQuest[currentIndex].options.sort((a, b)=> 0.5 - Math.random());\n    setQuestionArray(JSON.parse(window.localStorage.getItem(`${gameCat}-${gameLevel}`)).length != 0 ? JSON.parse(window.localStorage.getItem(`${gameCat}-${gameLevel}`)).sort((a, b) => 0.5 - Math.random()) : JSON.parse(window.localStorage.getItem(`generalknowledge-${gameLevel}`)).sort((a, b) => 0.5 - Math.random()));\n    setPassed('no');\n    setScore(0);\n    setAttempts(6);\n    setGameStarted(true);\n\n    const startPlay = () => {\n      if (questionsFetched !== null) {\n        setQuestionArray(JSON.parse(window.localStorage.getItem(`${gameCat}-${gameLevel}`))[currentIndex].options.sort((a, b) => 0.5 - Math.random()));\n        setTimeLeft(gameTime);\n\n        if (onSound) {\n          setIsPlaying(true);\n        }\n      }\n    };\n\n    setTimeout(startPlay, 500);\n    setScore(0);\n  };\n\n  const checkAnswer = option => {\n    if (questionArray[currentIndex].answer === option) {\n      setPassed('true');\n      setScore(score + 1);\n      setTimeout(onNextClick, 500);\n    } else {\n      setPassed('false');\n      setTimeLeft(0);\n      setAttempts(attemps - 1);\n    }\n  }; //Handle Next Button Click\n\n\n  const onNextClick = () => {\n    if (attemps > 0) {\n      setPassed('no');\n      setTimeLeft(gameTime);\n      setCurrentIndex(currentIndex + 1);\n    }\n  }; // Handle End Button Click\n\n\n  const onEndClick = () => {\n    setGameStarted(!gameStarted);\n    setTimeLeft(0);\n    setCurrentIndex(0);\n  }; //Update Game settings\n\n\n  useEffect(() => {\n    //Backup user's settings\n    const settings = {\n      gameCat,\n      gameLevel,\n      onSound\n    };\n    const userSettings = JSON.stringify(settings);\n    window.localStorage.setItem('settings', userSettings); //Simulate A CountDown Timer\n\n    if (timeLeft > 0 && gameStarted && passed === 'no') {\n      setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n    } else {\n      setTimeLeft(0);\n    }\n\n    if (timeLeft <= 0 && passed === 'no') {\n      setAttempts(attemps - 1);\n    }\n  }, [gameCat, gameLevel, onSound, timeLeft, gameStarted]); //Rendering Zone\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      onclick: handleMenuClick,\n      displayMenu: displayMenu,\n      gameStarted: gameStarted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MenuOptions, {\n      displayMenu: displayMenu,\n      toggleOnSound: toggleOnSound,\n      onSound: onSound,\n      play: play,\n      updateCategory: updateCategory,\n      updateLevel: updateLevel,\n      gameLevel: gameLevel,\n      gameCat: gameCat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n      play: play,\n      displayMenu: displayMenu,\n      gameStarted: gameStarted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GamePlayInfo, {\n      attemps: attemps,\n      score: score,\n      gameStarted: gameStarted,\n      timeLeft: timeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: isPlaying && onSound ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: myD,\n      loop: true,\n      volume: gameStarted ? 45 : displayMenu ? 15 : 25,\n      playbackRate: gameStarted ? 0.8 : displayMenu ? 0.51 : 0.58,\n      autoLoad: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EndButton, {\n      gameStarted: gameStarted,\n      handleClick: onEndClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(QuestionInterface, {\n      attemps: attemps,\n      passed: passed,\n      currentIndex: currentIndex,\n      questionArray: questionArray,\n      checkAnswer: checkAnswer,\n      gameStarted: gameStarted,\n      timeLeft: timeLeft,\n      onNextClick: onNextClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"M6TUiaS/KQsuWlb06lrJokPGkp0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/KENZEE101/Desktop/my-app-project/src/App.js"],"names":["TopBar","MenuOptions","PlayButton","GamePlayInfo","EndButton","QuestionInterface","Footer","Sound","myD","useState","useEffect","App","settingsFromBackUp","window","localStorage","getItem","settingData","JSON","parse","onSound","setOnSound","gameCat","setGameCat","gameLevel","setGameLevel","displayMenu","setDisplayMenu","isPlaying","setIsPlaying","repeat","setRepeat","gameStarted","setGameStarted","questionArray","setQuestionArray","question","options","answer","gameTime","setGameTime","timeLeft","setTimeLeft","currentIndex","setCurrentIndex","passed","setPassed","score","setScore","attemps","setAttempts","handleMenuClick","updateCategory","chosenCat","updateLevel","level","toggleOnSound","resp","questionsFetched","id","console","log","fetchQuestions","response","fetch","data","json","questions","results","k","q","incorrect_answers","correct_answer","i","Math","floor","random","splice","arr","length","p","sort","a","b","push","setItem","stringify","play","startPlay","setTimeout","checkAnswer","option","onNextClick","onEndClick","settings","userSettings","status","PLAYING","STOPPED"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,GAAP,MAAgB,+BAAhB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEd,QAAMC,kBAAkB,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAA3B;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWN,kBAAX,CAApB;AAEA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAACG,kBAAkB,GAAGI,WAAW,CAACG,OAAf,GAAyB,IAA5C,CAAtC;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACG,kBAAkB,GAAGI,WAAW,CAACK,OAAf,GAAyB,kBAA5C,CAAtC;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAACG,kBAAkB,GAAGI,WAAW,CAACO,SAAf,GAA2B,MAA9C,CAA1C;AACA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,CAAC;AAAC0B,IAAAA,QAAQ,EAAE,OAAX;AAAoBC,IAAAA,OAAO,EAAE,CAAC,MAAD,CAA7B;AAAuCC,IAAAA,MAAM,EAAE;AAA/C,GAAD,CAAD,CAAlD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC+B,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC6B,QAAD,CAAxC;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACmC,MAAD,EAASC,SAAT,IAAsBpC,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACqC,KAAD,EAAQC,QAAR,IAAoBtC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACuC,OAAD,EAAUC,WAAV,IAAyBxC,QAAQ,CAAC,CAAD,CAAvC,CAlBc,CA8Bd;;AAEA,QAAMyC,eAAe,GAAG,MAAI;AACxBxB,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACH,GAFD,CAhCc,CAqCd;;;AAEA,QAAM0B,cAAc,GAAIC,SAAD,IAAa;AAChC9B,IAAAA,UAAU,CAAC8B,SAAD,CAAV;AACH,GAFD,CAvCc,CA2Cd;;;AAEA,QAAMC,WAAW,GAAIC,KAAD,IAAS;AACzB9B,IAAAA,YAAY,CAAC8B,KAAD,CAAZ,CADyB,CAEzB;AACH,GAHD,CA7Cc,CAoDd;;;AACE,QAAMC,aAAa,GAAIC,IAAD,IAAQ;AAC1BpC,IAAAA,UAAU,CAACoC,IAAD,CAAV;;AAEF,QAAGrC,OAAH,EAAW;AACPS,MAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AAEH,KAHD,MAGM,IAAG,CAACR,OAAD,IAAY,CAACQ,SAAhB,EAA2B;AAC7BC,MAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;AACJ,GATC,CArDY,CAkEd;;;AAEA,QAAM8B,gBAAgB,GAAG5C,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA6B,GAAEM,OAAQ,IAAGE,SAAU,EAApD,CAAzB;;AACA,MAAG,CAACkC,gBAAJ,EAAqB;AAEjB,QAAIC,EAAE,GAAG,CAAT;;AAEA,YAAOrC,OAAP;AACI,WAAK,OAAL;AACIqC,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,QAAL;AACIA,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,WAAL;AACIA,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,WAAL;AACIA,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,aAAL;AACIA,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,YAAL;AACIA,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,YAAL;AACIA,QAAAA,EAAE,GAAG,EAAL;AACA;;AAEJ,WAAK,kBAAL;AACIA,QAAAA,EAAE,GAAG,CAAL;AACA;AA/BR;;AAkCDC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,EAA1B;;AAGC,UAAMG,cAAc,GAAG,YAAU;AAE7B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDL,EAAG,eAAcnC,SAAU,gBAA9E,CAA5B;AAEA,YAAMyC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAMC,SAAS,GAAGF,IAAI,CAACG,OAAvB;AACA,YAAMC,CAAC,GAAG,EAAV;;AACA,WAAI,IAAIC,CAAR,IAAaH,SAAb,EAAuB;AACnB,YAAI;AAAC/B,UAAAA,QAAD;AAAWmC,UAAAA,iBAAX;AAA8BC,UAAAA;AAA9B,YAAiDF,CAArD;AACA,cAAMG,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAV;AACAL,QAAAA,iBAAiB,CAACM,MAAlB,CAAyBJ,CAAzB,EAA4B,CAA5B,EAA+BD,cAA/B;AACA,YAAIM,GAAG,GAAG,CAAC,GAAGP,iBAAJ,CAAV;;AAEA,aAAI,IAAIE,CAAC,GAACK,GAAG,CAACC,MAAJ,GAAW,CAArB,EAAwBN,CAAC,GAAG,CAA5B,EAA+BA,CAAC,EAAhC,EAAmC;AAC9B,gBAAMO,CAAC,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcH,CAAzB,CAAV;AACD,WAACK,GAAG,CAACE,CAAD,CAAJ,EAASF,GAAG,CAACL,CAAD,CAAZ,IAAmB,CAACK,GAAG,CAACL,CAAD,CAAJ,EAASK,GAAG,CAACE,CAAD,CAAZ,CAAnB;AAEH;;AAEDT,QAAAA,iBAAiB,CAACU,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAS,MAAMT,IAAI,CAACE,MAAL,EAAtC;AACAP,QAAAA,CAAC,CAACe,IAAF,CAAO;AAAChD,UAAAA,QAAD;AAAWC,UAAAA,OAAO,EAAE,CAAC,GAAGyC,GAAJ,CAApB;AAA+BxC,UAAAA,MAAM,EAAEkC;AAAvC,SAAP;AACH;;AAED1D,MAAAA,MAAM,CAACC,YAAP,CAAoBsE,OAApB,CAA6B,GAAE/D,OAAQ,IAAGE,SAAU,EAApD,EAAuDN,IAAI,CAACoE,SAAL,CAAejB,CAAf,CAAvD;AAEF,KAzBF;;AA0BAP,IAAAA,cAAc;AAKjB;;AAGD,QAAMyB,IAAI,GAAG,MAAI;AACb;AACA;AACA;AACApD,IAAAA,gBAAgB,CAACjB,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA6B,GAAEM,OAAQ,IAAGE,SAAU,EAApD,CAAX,EAAmEuD,MAAnE,IAA6E,CAA7E,GAAiF7D,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA6B,GAAEM,OAAQ,IAAGE,SAAU,EAApD,CAAX,EAAmEyD,IAAnE,CAAwE,CAACC,CAAD,EAAIC,CAAJ,KAAS,MAAMT,IAAI,CAACE,MAAL,EAAvF,CAAjF,GAAyL1D,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA6B,oBAAmBQ,SAAU,EAA1D,CAAX,EAAyEyD,IAAzE,CAA8E,CAACC,CAAD,EAAIC,CAAJ,KAAS,MAAMT,IAAI,CAACE,MAAL,EAA7F,CAA1L,CAAhB;AAEA9B,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAE,IAAAA,WAAW,CAAC,CAAD,CAAX;AACAjB,IAAAA,cAAc,CAAC,IAAD,CAAd;;AACA,UAAMuD,SAAS,GAAG,MAAI;AAElB,UAAG9B,gBAAgB,KAAK,IAAxB,EAA6B;AACzBvB,QAAAA,gBAAgB,CAAEjB,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA6B,GAAEM,OAAQ,IAAGE,SAAU,EAApD,CAAX,CAAD,CAAqEmB,YAArE,EAAmFN,OAAnF,CAA2F4C,IAA3F,CAAgG,CAACC,CAAD,EAAIC,CAAJ,KAAQ,MAAIT,IAAI,CAACE,MAAL,EAA5G,CAAD,CAAhB;AACAlC,QAAAA,WAAW,CAACH,QAAD,CAAX;;AACA,YAAGnB,OAAH,EAAW;AACPS,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACF;AAEL;AACJ,KAVD;;AAWA4D,IAAAA,UAAU,CAACD,SAAD,EAAY,GAAZ,CAAV;AACAxC,IAAAA,QAAQ,CAAC,CAAD,CAAR;AAEH,GAxBD;;AA4BA,QAAM0C,WAAW,GAAIC,MAAD,IAAU;AAC1B,QAAGzD,aAAa,CAACS,YAAD,CAAb,CAA4BL,MAA5B,KAAuCqD,MAA1C,EAAiD;AAC7C7C,MAAAA,SAAS,CAAC,MAAD,CAAT;AACAE,MAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACA0C,MAAAA,UAAU,CAACG,WAAD,EAAc,GAAd,CAAV;AACH,KAJD,MAIK;AACD9C,MAAAA,SAAS,CAAC,OAAD,CAAT;AACAJ,MAAAA,WAAW,CAAC,CAAD,CAAX;AACAQ,MAAAA,WAAW,CAACD,OAAO,GAAC,CAAT,CAAX;AAGH;AACJ,GAZD,CA5Kc,CA0Ld;;;AAEA,QAAM2C,WAAW,GAAG,MAAI;AACpB,QAAG3C,OAAO,GAAG,CAAb,EAAe;AAEXH,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAJ,MAAAA,WAAW,CAACH,QAAD,CAAX;AACAK,MAAAA,eAAe,CAACD,YAAY,GAAC,CAAd,CAAf;AACH;AAGJ,GATD,CA5Lc,CAwMd;;;AAEA,QAAMkD,UAAU,GAAG,MAAI;AACnB5D,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACAU,IAAAA,WAAW,CAAC,CAAD,CAAX;AACAE,IAAAA,eAAe,CAAC,CAAD,CAAf;AAMH,GATD,CA1Mc,CAuNd;;;AAEAjC,EAAAA,SAAS,CAAC,MAAI;AACV;AACA,UAAMmF,QAAQ,GAAG;AAAExE,MAAAA,OAAF;AAAWE,MAAAA,SAAX;AAAqBJ,MAAAA;AAArB,KAAjB;AACA,UAAM2E,YAAY,GAAG7E,IAAI,CAACoE,SAAL,CAAeQ,QAAf,CAArB;AACAhF,IAAAA,MAAM,CAACC,YAAP,CAAoBsE,OAApB,CAA4B,UAA5B,EAAwCU,YAAxC,EAJU,CAMd;;AAGA,QAAGtD,QAAQ,GAAG,CAAX,IAAgBT,WAAhB,IAA+Ba,MAAM,KAAK,IAA7C,EAAkD;AAC/C4C,MAAAA,UAAU,CAAC,MAAI/C,WAAW,CAACD,QAAQ,GAAC,CAAV,CAAhB,EAA8B,IAA9B,CAAV;AACF,KAFD,MAEM;AAEFC,MAAAA,WAAW,CAAC,CAAD,CAAX;AACH;;AAGD,QAAGD,QAAQ,IAAG,CAAX,IAAgBI,MAAM,KAAG,IAA5B,EAAiC;AAC7BK,MAAAA,WAAW,CAACD,OAAO,GAAC,CAAT,CAAX;AACH;AAEA,GArBQ,EAqBN,CAAC3B,OAAD,EAAUE,SAAV,EAAqBJ,OAArB,EAA6BqB,QAA7B,EAAuCT,WAAvC,CArBM,CAAT,CAzNc,CAkPd;;AAEA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEmB,eAAjB;AAAkC,MAAA,WAAW,EAAEzB,WAA/C;AAA4D,MAAA,WAAW,EAAEM;AAAzE;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,WAAD;AAAc,MAAA,WAAW,EAAEN,WAA3B;AAAyC,MAAA,aAAa,EAAE8B,aAAxD;AAAwE,MAAA,OAAO,EAAEpC,OAAjF;AAA0F,MAAA,IAAI,EAAEmE,IAAhG;AAAsG,MAAA,cAAc,EAAEnC,cAAtH;AAAsI,MAAA,WAAW,EAAEE,WAAnJ;AAAgK,MAAA,SAAS,EAAE9B,SAA3K;AAAqL,MAAA,OAAO,EAAEF;AAA9L;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEiE,IAAlB;AAAwB,MAAA,WAAW,EAAE7D,WAArC;AAAkD,MAAA,WAAW,EAAEM;AAA/D;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEiB,OAAvB;AAAgC,MAAA,KAAK,EAAEF,KAAvC;AAA8C,MAAA,WAAW,EAAEf,WAA3D;AAAwE,MAAA,QAAQ,EAAES;AAAlF;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,KAAD;AAAO,MAAA,UAAU,EAAEb,SAAS,IAAIR,OAAb,GAAuBZ,KAAK,CAACwF,MAAN,CAAaC,OAApC,GAA8CzF,KAAK,CAACwF,MAAN,CAAaE,OAA9E;AAAwF,MAAA,GAAG,EAAEzF,GAA7F;AAAkG,MAAA,IAAI,EAAE,IAAxG;AAA8G,MAAA,MAAM,EAAEuB,WAAW,GAAG,EAAH,GAAQN,WAAW,GAAG,EAAH,GAAO,EAA3J;AAA+J,MAAA,YAAY,EAAEM,WAAW,GAAG,GAAH,GAASN,WAAW,GAAG,IAAH,GAAU,IAAtN;AAA6N,MAAA,QAAQ,EAAE;AAAvO;AAAA;AAAA;AAAA;AAAA,YALJ,eAMG,QAAC,SAAD;AAAW,MAAA,WAAW,EAAEM,WAAxB;AAAqC,MAAA,WAAW,EAAE6D;AAAlD;AAAA;AAAA;AAAA;AAAA,YANH,eAOG,QAAC,iBAAD;AAAmB,MAAA,OAAO,EAAE5C,OAA5B;AAAqC,MAAA,MAAM,EAAEJ,MAA7C;AAAqD,MAAA,YAAY,EAAEF,YAAnE;AAAiF,MAAA,aAAa,EAAET,aAAhG;AAA+G,MAAA,WAAW,EAAEwD,WAA5H;AAAyI,MAAA,WAAW,EAAE1D,WAAtJ;AAAmK,MAAA,QAAQ,EAAES,QAA7K;AAAuL,MAAA,WAAW,EAAEmD;AAApM;AAAA;AAAA;AAAA;AAAA,YAPH,eAQG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YARH;AAAA,kBADJ;AAYH,CAhQD;;GAAMhF,G;;KAAAA,G;AAkQN,eAAeA,GAAf","sourcesContent":["import TopBar from \"./components/TopBar\"\r\nimport MenuOptions from \"./components/MenuOptions\";\r\nimport PlayButton from \"./components/PlayButton\";\r\nimport GamePlayInfo from \"./components/GamePlayInfo\";\r\nimport EndButton from \"./components/EndButton\";\r\nimport QuestionInterface from \"./components/QuestionInterface\";\r\nimport Footer from \"./components/Footer\";\r\nimport Sound from 'react-sound';\r\nimport myD from './sounds/4 final mid game.mp3';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n\r\n    const settingsFromBackUp = window.localStorage.getItem('settings');\r\n    const settingData = JSON.parse(settingsFromBackUp);\r\n   \r\n    const [onSound, setOnSound] = useState(settingsFromBackUp ? settingData.onSound : true);\r\n    const [gameCat, setGameCat] = useState(settingsFromBackUp ? settingData.gameCat : 'generalknowledge');\r\n    const [gameLevel, setGameLevel] = useState(settingsFromBackUp ? settingData.gameLevel : 'easy');\r\n    const [displayMenu, setDisplayMenu] = useState(false);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [repeat, setRepeat] = useState(true);\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [questionArray, setQuestionArray] = useState([{question: 'hello', options: ['Home'], answer: 'ok'}]);\r\n    const [gameTime, setGameTime] = useState(30);\r\n    const [timeLeft, setTimeLeft] = useState(gameTime);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [passed, setPassed] = useState('no');\r\n    const [score, setScore] = useState(0);\r\n    const [attemps, setAttempts] = useState(6);\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n  \r\n\r\n    \r\n    // Menu Bar Actions\r\n    \r\n    const handleMenuClick = ()=>{\r\n        setDisplayMenu(!displayMenu);\r\n    }\r\n\r\n    \r\n    // Update Category Chosen by the user\r\n\r\n    const updateCategory = (chosenCat)=>{\r\n        setGameCat(chosenCat)\r\n    }\r\n    \r\n    //Update Game Level set by the user\r\n    \r\n    const updateLevel = (level)=>{\r\n        setGameLevel(level)\r\n        // handleTimer(timerValue)\r\n    }\r\n    \r\n\r\n    \r\n    //Handle Sound ON/OFF\r\n      const toggleOnSound = (resp)=>{\r\n          setOnSound(resp)\r\n\r\n        if(onSound){\r\n            setIsPlaying(!isPlaying)\r\n\r\n        }else if(!onSound && !isPlaying) {\r\n            setIsPlaying(!isPlaying)\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    //Play Actions\r\n    \r\n    const questionsFetched = window.localStorage.getItem(`${gameCat}-${gameLevel}`);\r\n    if(!questionsFetched){\r\n\r\n        let id = 9;\r\n        \r\n        switch(gameCat){\r\n            case 'books':\r\n                id = 10;\r\n                break;\r\n\r\n            case 'comics':\r\n                id = 29;\r\n                break;\r\n\r\n            case 'computers':\r\n                id = 18;\r\n                break;\r\n\r\n            case 'geography':\r\n                id = 22;\r\n                break;\r\n\r\n            case 'mathematics':\r\n                id = 19;\r\n                break;\r\n            \r\n            case 'television':\r\n                id = 14;\r\n                break;\r\n\r\n            case 'videogames':\r\n                id = 15;\r\n                break;\r\n\r\n            case 'generalknowledge':\r\n                id = 9;\r\n                break;\r\n        }\r\n\r\n       console.log('Current ID', id)\r\n        \r\n      \r\n        const fetchQuestions = async ()=>{\r\n          \r\n            const response = await fetch(`https://opentdb.com/api.php?amount=50&category=${id}&difficulty=${gameLevel}&type=multiple`);\r\n\r\n            const data = await response.json();\r\n            const questions = data.results;\r\n            const k = [];\r\n            for(let q of questions){\r\n                let {question, incorrect_answers, correct_answer } = q;\r\n                const i = Math.floor(Math.random()*3);\r\n                incorrect_answers.splice(i, 0, correct_answer);\r\n                let arr = [...incorrect_answers];\r\n\r\n                for(let i=arr.length-1; i > 0; i--){\r\n                     const p = Math.floor(Math.random()*i);\r\n                    [arr[p], arr[i]] = [arr[i], arr[p]];\r\n\r\n                }\r\n                \r\n                incorrect_answers.sort((a, b)=> 0.5 - Math.random());\r\n                k.push({question, options: [...arr] , answer: correct_answer});\r\n            }\r\n\r\n            window.localStorage.setItem(`${gameCat}-${gameLevel}`, JSON.stringify(k));\r\n            \r\n         }\r\n        fetchQuestions();\r\n            \r\n\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    const play = ()=>{\r\n        //Check if we already have the questions downloaded and stored locally\r\n        // let sortedQuest = [...questionArray]\r\n        // sortedQuest[currentIndex].options.sort((a, b)=> 0.5 - Math.random());\r\n        setQuestionArray(JSON.parse(window.localStorage.getItem(`${gameCat}-${gameLevel}`)).length != 0 ? JSON.parse(window.localStorage.getItem(`${gameCat}-${gameLevel}`)).sort((a, b)=> 0.5 - Math.random()) : JSON.parse(window.localStorage.getItem(`generalknowledge-${gameLevel}`)).sort((a, b)=> 0.5 - Math.random()));\r\n       \r\n        setPassed('no')\r\n        setScore(0)\r\n        setAttempts(6)\r\n        setGameStarted(true);\r\n        const startPlay = ()=>{\r\n            \r\n            if(questionsFetched !== null){\r\n                setQuestionArray((JSON.parse(window.localStorage.getItem(`${gameCat}-${gameLevel}`)))[currentIndex].options.sort((a, b)=>0.5-Math.random()))\r\n                setTimeLeft(gameTime)\r\n                if(onSound){\r\n                    setIsPlaying(true)\r\n                 }\r\n                \r\n            }\r\n        }\r\n        setTimeout(startPlay, 500)\r\n        setScore(0)\r\n         \r\n    }\r\n    \r\n    \r\n\r\n    const checkAnswer = (option)=>{\r\n        if(questionArray[currentIndex].answer === option){\r\n            setPassed('true')\r\n            setScore(score+1)\r\n            setTimeout(onNextClick, 500)\r\n        }else{\r\n            setPassed('false')\r\n            setTimeLeft(0);\r\n            setAttempts(attemps-1)\r\n\r\n\r\n        }   \r\n    }\r\n\r\n    //Handle Next Button Click\r\n\r\n    const onNextClick = ()=>{\r\n        if(attemps > 0){\r\n\r\n            setPassed('no')\r\n            setTimeLeft(gameTime);\r\n            setCurrentIndex(currentIndex+1);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    // Handle End Button Click\r\n\r\n    const onEndClick = ()=>{\r\n        setGameStarted(!gameStarted)\r\n        setTimeLeft(0);\r\n        setCurrentIndex(0);\r\n        \r\n        \r\n\r\n       \r\n        \r\n    }\r\n    \r\n  \r\n    \r\n    //Update Game settings\r\n\r\n    useEffect(()=>{\r\n        //Backup user's settings\r\n        const settings = { gameCat, gameLevel,onSound };\r\n        const userSettings = JSON.stringify(settings)\r\n        window.localStorage.setItem('settings', userSettings)\r\n\r\n    //Simulate A CountDown Timer\r\n   \r\n\r\n    if(timeLeft > 0 && gameStarted && passed === 'no'){\r\n       setTimeout(()=>setTimeLeft(timeLeft-1), 1000); \r\n    }else {\r\n       \r\n        setTimeLeft(0);\r\n    }\r\n    \r\n    \r\n    if(timeLeft <=0 && passed==='no'){\r\n        setAttempts(attemps-1)\r\n    }\r\n\r\n    }, [gameCat, gameLevel, onSound,timeLeft, gameStarted])\r\n    \r\n   \r\n\r\n    //Rendering Zone\r\n\r\n    return (\r\n        <>  \r\n            <TopBar onclick={handleMenuClick} displayMenu={displayMenu} gameStarted={gameStarted}/>\r\n            <MenuOptions  displayMenu={displayMenu}  toggleOnSound={toggleOnSound}  onSound={onSound} play={play} updateCategory={updateCategory} updateLevel={updateLevel} gameLevel={gameLevel}gameCat={gameCat} />\r\n            <PlayButton play={play} displayMenu={displayMenu} gameStarted={gameStarted}/>\r\n            <GamePlayInfo attemps={attemps} score={score} gameStarted={gameStarted} timeLeft={timeLeft}/>\r\n            <Sound playStatus={isPlaying && onSound ? Sound.status.PLAYING : Sound.status.STOPPED}  url={myD} loop={true} volume={gameStarted ? 45 : displayMenu ? 15: 25} playbackRate={gameStarted ? 0.8 : displayMenu ? 0.51 : 0.58 } autoLoad={true}/>\r\n           <EndButton gameStarted={gameStarted} handleClick={onEndClick}/>\r\n           <QuestionInterface attemps={attemps} passed={passed} currentIndex={currentIndex} questionArray={questionArray} checkAnswer={checkAnswer} gameStarted={gameStarted} timeLeft={timeLeft} onNextClick={onNextClick}/>\r\n           <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}